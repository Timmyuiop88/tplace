generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
   id            String          @id @default(cuid())
  firstName          String?
  lastName          String?
  email         String    @unique
  emailVerified DateTime?
  password      String
  image         String?
  points        Int     @default(0)
  accounts      Account[]
  sessions      Session[]
  uniqueId        String     @default(uuid())
  phoneNumber    String?
  products       Product[] @relation("ProductUser")
  boughtProducts Product[] @relation("BoughtProducts")
  offers         Offer[]
    // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}


model Product {
  id            Int       @id @default(autoincrement())
  title         String
  description   String
  price         Float
  mainPhoto     String
  category      String
  state         String?
  city          String?
  photos        String[]
  isSold        Boolean   @default(false)
  userId        String
  user          User      @relation("ProductUser", fields: [userId], references: [id])
  buyerId       String?
  buyer         User?    @relation("BoughtProducts", fields: [buyerId], references: [id], onDelete: Cascade)
  offers        Offer[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Offer {
  id              Int             @id @default(autoincrement())
  amount          Float
  message         String
  accepted        Boolean         @default(false)
  userId          String
  user            User            @relation(fields: [userId], references: [id])
  productId       Int
  product         Product         @relation(fields: [productId], references: [id])
  acceptedOffer   AcceptedOffer?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
}

model AcceptedOffer {
  id          Int       @id @default(autoincrement())
  offerId     Int       @unique
  offer       Offer     @relation(fields: [offerId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}
